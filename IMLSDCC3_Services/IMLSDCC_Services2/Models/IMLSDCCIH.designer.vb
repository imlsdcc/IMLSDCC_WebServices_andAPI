'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.17929
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="IH_IMLS")>  _
Partial Public Class IMLSDCCIHDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCollectionProperty(instance As CollectionProperty)
    End Sub
  Partial Private Sub UpdateCollectionProperty(instance As CollectionProperty)
    End Sub
  Partial Private Sub DeleteCollectionProperty(instance As CollectionProperty)
    End Sub
  Partial Private Sub InsertInstitutionProperty(instance As InstitutionProperty)
    End Sub
  Partial Private Sub UpdateInstitutionProperty(instance As InstitutionProperty)
    End Sub
  Partial Private Sub DeleteInstitutionProperty(instance As InstitutionProperty)
    End Sub
  Partial Private Sub InsertCollection(instance As Collection)
    End Sub
  Partial Private Sub UpdateCollection(instance As Collection)
    End Sub
  Partial Private Sub DeleteCollection(instance As Collection)
    End Sub
  Partial Private Sub InsertCollectionInstitution(instance As CollectionInstitution)
    End Sub
  Partial Private Sub UpdateCollectionInstitution(instance As CollectionInstitution)
    End Sub
  Partial Private Sub DeleteCollectionInstitution(instance As CollectionInstitution)
    End Sub
  Partial Private Sub InsertInstitution(instance As Institution)
    End Sub
  Partial Private Sub UpdateInstitution(instance As Institution)
    End Sub
  Partial Private Sub DeleteInstitution(instance As Institution)
    End Sub
  Partial Private Sub InsertControlledVocabulary(instance As ControlledVocabulary)
    End Sub
  Partial Private Sub UpdateControlledVocabulary(instance As ControlledVocabulary)
    End Sub
  Partial Private Sub DeleteControlledVocabulary(instance As ControlledVocabulary)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("IH_IMLSConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property ShortDisplays() As System.Data.Linq.Table(Of ShortDisplay)
		Get
			Return Me.GetTable(Of ShortDisplay)
		End Get
	End Property
	
	Public ReadOnly Property CollectionProperties() As System.Data.Linq.Table(Of CollectionProperty)
		Get
			Return Me.GetTable(Of CollectionProperty)
		End Get
	End Property
	
	Public ReadOnly Property LongDisplays() As System.Data.Linq.Table(Of LongDisplay)
		Get
			Return Me.GetTable(Of LongDisplay)
		End Get
	End Property
	
	Public ReadOnly Property InstitutionProperties() As System.Data.Linq.Table(Of InstitutionProperty)
		Get
			Return Me.GetTable(Of InstitutionProperty)
		End Get
	End Property
	
	Public ReadOnly Property Collections() As System.Data.Linq.Table(Of Collection)
		Get
			Return Me.GetTable(Of Collection)
		End Get
	End Property
	
	Public ReadOnly Property CollectionInstitutions() As System.Data.Linq.Table(Of CollectionInstitution)
		Get
			Return Me.GetTable(Of CollectionInstitution)
		End Get
	End Property
	
	Public ReadOnly Property Institutions() As System.Data.Linq.Table(Of Institution)
		Get
			Return Me.GetTable(Of Institution)
		End Get
	End Property
	
	Public ReadOnly Property ControlledVocabularies() As System.Data.Linq.Table(Of ControlledVocabulary)
		Get
			Return Me.GetTable(Of ControlledVocabulary)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.collCTQ", IsComposable:=true)>  _
	Public Function collCTQ(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(255)")> ByVal phrase As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(255)")> ByVal queryType As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal top_n As System.Nullable(Of Integer)) As IQueryable(Of collCTQResult)
		Return Me.CreateMethodCallQuery(Of collCTQResult)(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), phrase, queryType, top_n)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.collectionDetails")>  _
	Public Function collectionDetails(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal cid As System.Nullable(Of Integer)) As ISingleResult(Of collectionDetailsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), cid)
		Return CType(result.ReturnValue,ISingleResult(Of collectionDetailsResult))
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ShortDisplay")>  _
Partial Public Class ShortDisplay
	
	Private _collectionID As Integer
	
	Private _title_collection As String
	
	Private _description As String
	
	Private _isAvailableAt_URL As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_collectionID", DbType:="Int NOT NULL")>  _
	Public Property collectionID() As Integer
		Get
			Return Me._collectionID
		End Get
		Set
			If ((Me._collectionID = value)  _
						= false) Then
				Me._collectionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_title_collection", DbType:="NVarChar(3000) NOT NULL", CanBeNull:=false)>  _
	Public Property title_collection() As String
		Get
			Return Me._title_collection
		End Get
		Set
			If (String.Equals(Me._title_collection, value) = false) Then
				Me._title_collection = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="NVarChar(3000)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me._description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isAvailableAt_URL", DbType:="NVarChar(3000)")>  _
	Public Property isAvailableAt_URL() As String
		Get
			Return Me._isAvailableAt_URL
		End Get
		Set
			If (String.Equals(Me._isAvailableAt_URL, value) = false) Then
				Me._isAvailableAt_URL = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CollectionProperties")>  _
Partial Public Class CollectionProperty
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _collectionPropertyID As Integer
	
	Private _collectionID As Integer
	
	Private _property As String
	
	Private _propertyType As String
	
	Private _text As String
	
	Private _Collection As EntityRef(Of Collection)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncollectionPropertyIDChanging(value As Integer)
    End Sub
    Partial Private Sub OncollectionPropertyIDChanged()
    End Sub
    Partial Private Sub OncollectionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OncollectionIDChanged()
    End Sub
    Partial Private Sub OnpropertyChanging(value As String)
    End Sub
    Partial Private Sub OnpropertyChanged()
    End Sub
    Partial Private Sub OnpropertyTypeChanging(value As String)
    End Sub
    Partial Private Sub OnpropertyTypeChanged()
    End Sub
    Partial Private Sub OntextChanging(value As String)
    End Sub
    Partial Private Sub OntextChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Collection = CType(Nothing, EntityRef(Of Collection))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_collectionPropertyID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property collectionPropertyID() As Integer
		Get
			Return Me._collectionPropertyID
		End Get
		Set
			If ((Me._collectionPropertyID = value)  _
						= false) Then
				Me.OncollectionPropertyIDChanging(value)
				Me.SendPropertyChanging
				Me._collectionPropertyID = value
				Me.SendPropertyChanged("collectionPropertyID")
				Me.OncollectionPropertyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_collectionID", DbType:="Int NOT NULL")>  _
	Public Property collectionID() As Integer
		Get
			Return Me._collectionID
		End Get
		Set
			If ((Me._collectionID = value)  _
						= false) Then
				If Me._Collection.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OncollectionIDChanging(value)
				Me.SendPropertyChanging
				Me._collectionID = value
				Me.SendPropertyChanged("collectionID")
				Me.OncollectionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="property", Storage:="_property", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property [property]() As String
		Get
			Return Me._property
		End Get
		Set
			If (String.Equals(Me._property, value) = false) Then
				Me.OnpropertyChanging(value)
				Me.SendPropertyChanging
				Me._property = value
				Me.SendPropertyChanged("[property]")
				Me.OnpropertyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_propertyType", DbType:="NVarChar(50)")>  _
	Public Property propertyType() As String
		Get
			Return Me._propertyType
		End Get
		Set
			If (String.Equals(Me._propertyType, value) = false) Then
				Me.OnpropertyTypeChanging(value)
				Me.SendPropertyChanging
				Me._propertyType = value
				Me.SendPropertyChanged("propertyType")
				Me.OnpropertyTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_text", DbType:="NVarChar(3000) NOT NULL", CanBeNull:=false)>  _
	Public Property text() As String
		Get
			Return Me._text
		End Get
		Set
			If (String.Equals(Me._text, value) = false) Then
				Me.OntextChanging(value)
				Me.SendPropertyChanging
				Me._text = value
				Me.SendPropertyChanged("text")
				Me.OntextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Collection_CollectionProperty", Storage:="_Collection", ThisKey:="collectionID", OtherKey:="collectionID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Collection() As Collection
		Get
			Return Me._Collection.Entity
		End Get
		Set
			Dim previousValue As Collection = Me._Collection.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Collection.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Collection.Entity = Nothing
					previousValue.CollectionProperties.Remove(Me)
				End If
				Me._Collection.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CollectionProperties.Add(Me)
					Me._collectionID = value.collectionID
				Else
					Me._collectionID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Collection")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LongDisplay")>  _
Partial Public Class LongDisplay
	
	Private _collectionID As Integer
	
	Private _type_collection As String
	
	Private _format As String
	
	Private _size As String
	
	Private _relation_supplement As String
	
	Private _publisher As String
	
	Private _audience As String
	
	Private _interactivity As String
	
	Private _accessrights As String
	
	Private _rights As String
	
	Private _accrualPeriodicity As String
	
	Private _contributor As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_collectionID", DbType:="Int NOT NULL")>  _
	Public Property collectionID() As Integer
		Get
			Return Me._collectionID
		End Get
		Set
			If ((Me._collectionID = value)  _
						= false) Then
				Me._collectionID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_type_collection", DbType:="NVarChar(3000)")>  _
	Public Property type_collection() As String
		Get
			Return Me._type_collection
		End Get
		Set
			If (String.Equals(Me._type_collection, value) = false) Then
				Me._type_collection = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_format", DbType:="NVarChar(3000)")>  _
	Public Property format() As String
		Get
			Return Me._format
		End Get
		Set
			If (String.Equals(Me._format, value) = false) Then
				Me._format = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_size", DbType:="NVarChar(3000)")>  _
	Public Property size() As String
		Get
			Return Me._size
		End Get
		Set
			If (String.Equals(Me._size, value) = false) Then
				Me._size = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_relation_supplement", DbType:="NVarChar(3000)")>  _
	Public Property relation_supplement() As String
		Get
			Return Me._relation_supplement
		End Get
		Set
			If (String.Equals(Me._relation_supplement, value) = false) Then
				Me._relation_supplement = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_publisher", DbType:="NVarChar(3000)")>  _
	Public Property publisher() As String
		Get
			Return Me._publisher
		End Get
		Set
			If (String.Equals(Me._publisher, value) = false) Then
				Me._publisher = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_audience", DbType:="NVarChar(3000)")>  _
	Public Property audience() As String
		Get
			Return Me._audience
		End Get
		Set
			If (String.Equals(Me._audience, value) = false) Then
				Me._audience = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_interactivity", DbType:="NVarChar(3000)")>  _
	Public Property interactivity() As String
		Get
			Return Me._interactivity
		End Get
		Set
			If (String.Equals(Me._interactivity, value) = false) Then
				Me._interactivity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accessrights", DbType:="NVarChar(3000)")>  _
	Public Property accessrights() As String
		Get
			Return Me._accessrights
		End Get
		Set
			If (String.Equals(Me._accessrights, value) = false) Then
				Me._accessrights = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rights", DbType:="NVarChar(3000)")>  _
	Public Property rights() As String
		Get
			Return Me._rights
		End Get
		Set
			If (String.Equals(Me._rights, value) = false) Then
				Me._rights = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accrualPeriodicity", DbType:="NVarChar(3000)")>  _
	Public Property accrualPeriodicity() As String
		Get
			Return Me._accrualPeriodicity
		End Get
		Set
			If (String.Equals(Me._accrualPeriodicity, value) = false) Then
				Me._accrualPeriodicity = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contributor", DbType:="NVarChar(3000)")>  _
	Public Property contributor() As String
		Get
			Return Me._contributor
		End Get
		Set
			If (String.Equals(Me._contributor, value) = false) Then
				Me._contributor = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.InstitutionProperties")>  _
Partial Public Class InstitutionProperty
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _institutionPropertyID As Integer
	
	Private _institutionID As Integer
	
	Private _property As String
	
	Private _propertyType As String
	
	Private _text As String
	
	Private _Institution As EntityRef(Of Institution)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OninstitutionPropertyIDChanging(value As Integer)
    End Sub
    Partial Private Sub OninstitutionPropertyIDChanged()
    End Sub
    Partial Private Sub OninstitutionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OninstitutionIDChanged()
    End Sub
    Partial Private Sub OnpropertyChanging(value As String)
    End Sub
    Partial Private Sub OnpropertyChanged()
    End Sub
    Partial Private Sub OnpropertyTypeChanging(value As String)
    End Sub
    Partial Private Sub OnpropertyTypeChanged()
    End Sub
    Partial Private Sub OntextChanging(value As String)
    End Sub
    Partial Private Sub OntextChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Institution = CType(Nothing, EntityRef(Of Institution))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_institutionPropertyID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property institutionPropertyID() As Integer
		Get
			Return Me._institutionPropertyID
		End Get
		Set
			If ((Me._institutionPropertyID = value)  _
						= false) Then
				Me.OninstitutionPropertyIDChanging(value)
				Me.SendPropertyChanging
				Me._institutionPropertyID = value
				Me.SendPropertyChanged("institutionPropertyID")
				Me.OninstitutionPropertyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_institutionID", DbType:="Int NOT NULL")>  _
	Public Property institutionID() As Integer
		Get
			Return Me._institutionID
		End Get
		Set
			If ((Me._institutionID = value)  _
						= false) Then
				If Me._Institution.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OninstitutionIDChanging(value)
				Me.SendPropertyChanging
				Me._institutionID = value
				Me.SendPropertyChanged("institutionID")
				Me.OninstitutionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="property", Storage:="_property", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property [property]() As String
		Get
			Return Me._property
		End Get
		Set
			If (String.Equals(Me._property, value) = false) Then
				Me.OnpropertyChanging(value)
				Me.SendPropertyChanging
				Me._property = value
				Me.SendPropertyChanged("[property]")
				Me.OnpropertyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_propertyType", DbType:="NVarChar(50)")>  _
	Public Property propertyType() As String
		Get
			Return Me._propertyType
		End Get
		Set
			If (String.Equals(Me._propertyType, value) = false) Then
				Me.OnpropertyTypeChanging(value)
				Me.SendPropertyChanging
				Me._propertyType = value
				Me.SendPropertyChanged("propertyType")
				Me.OnpropertyTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_text", DbType:="NVarChar(3000) NOT NULL", CanBeNull:=false)>  _
	Public Property text() As String
		Get
			Return Me._text
		End Get
		Set
			If (String.Equals(Me._text, value) = false) Then
				Me.OntextChanging(value)
				Me.SendPropertyChanging
				Me._text = value
				Me.SendPropertyChanged("text")
				Me.OntextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Institution_InstitutionProperty", Storage:="_Institution", ThisKey:="institutionID", OtherKey:="institutionID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Institution() As Institution
		Get
			Return Me._Institution.Entity
		End Get
		Set
			Dim previousValue As Institution = Me._Institution.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Institution.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Institution.Entity = Nothing
					previousValue.InstitutionProperties.Remove(Me)
				End If
				Me._Institution.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.InstitutionProperties.Add(Me)
					Me._institutionID = value.institutionID
				Else
					Me._institutionID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Institution")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Collections")>  _
Partial Public Class Collection
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _collectionID As Integer
	
	Private _collectionNumber As String
	
	Private _ready As System.Nullable(Of Boolean)
	
	Private _imls As String
	
	Private _ih As String
	
	Private _dlf As String
	
	Private _hist As String
	
	Private _dpla As String
	
	Private _physical As Boolean
	
	Private _portalCode As System.Nullable(Of Byte)
	
	Private _CollectionProperties As EntitySet(Of CollectionProperty)
	
	Private _CollectionInstitutions As EntitySet(Of CollectionInstitution)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncollectionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OncollectionIDChanged()
    End Sub
    Partial Private Sub OncollectionNumberChanging(value As String)
    End Sub
    Partial Private Sub OncollectionNumberChanged()
    End Sub
    Partial Private Sub OnreadyChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnreadyChanged()
    End Sub
    Partial Private Sub OnimlsChanging(value As String)
    End Sub
    Partial Private Sub OnimlsChanged()
    End Sub
    Partial Private Sub OnihChanging(value As String)
    End Sub
    Partial Private Sub OnihChanged()
    End Sub
    Partial Private Sub OndlfChanging(value As String)
    End Sub
    Partial Private Sub OndlfChanged()
    End Sub
    Partial Private Sub OnhistChanging(value As String)
    End Sub
    Partial Private Sub OnhistChanged()
    End Sub
    Partial Private Sub OndplaChanging(value As String)
    End Sub
    Partial Private Sub OndplaChanged()
    End Sub
    Partial Private Sub OnphysicalChanging(value As Boolean)
    End Sub
    Partial Private Sub OnphysicalChanged()
    End Sub
    Partial Private Sub OnportalCodeChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnportalCodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CollectionProperties = New EntitySet(Of CollectionProperty)(AddressOf Me.attach_CollectionProperties, AddressOf Me.detach_CollectionProperties)
		Me._CollectionInstitutions = New EntitySet(Of CollectionInstitution)(AddressOf Me.attach_CollectionInstitutions, AddressOf Me.detach_CollectionInstitutions)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_collectionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property collectionID() As Integer
		Get
			Return Me._collectionID
		End Get
		Set
			If ((Me._collectionID = value)  _
						= false) Then
				Me.OncollectionIDChanging(value)
				Me.SendPropertyChanging
				Me._collectionID = value
				Me.SendPropertyChanged("collectionID")
				Me.OncollectionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_collectionNumber", DbType:="NVarChar(50)")>  _
	Public Property collectionNumber() As String
		Get
			Return Me._collectionNumber
		End Get
		Set
			If (String.Equals(Me._collectionNumber, value) = false) Then
				Me.OncollectionNumberChanging(value)
				Me.SendPropertyChanging
				Me._collectionNumber = value
				Me.SendPropertyChanged("collectionNumber")
				Me.OncollectionNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ready", DbType:="Bit")>  _
	Public Property ready() As System.Nullable(Of Boolean)
		Get
			Return Me._ready
		End Get
		Set
			If (Me._ready.Equals(value) = false) Then
				Me.OnreadyChanging(value)
				Me.SendPropertyChanging
				Me._ready = value
				Me.SendPropertyChanged("ready")
				Me.OnreadyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_imls", DbType:="NVarChar(50)")>  _
	Public Property imls() As String
		Get
			Return Me._imls
		End Get
		Set
			If (String.Equals(Me._imls, value) = false) Then
				Me.OnimlsChanging(value)
				Me.SendPropertyChanging
				Me._imls = value
				Me.SendPropertyChanged("imls")
				Me.OnimlsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ih", DbType:="NVarChar(50)")>  _
	Public Property ih() As String
		Get
			Return Me._ih
		End Get
		Set
			If (String.Equals(Me._ih, value) = false) Then
				Me.OnihChanging(value)
				Me.SendPropertyChanging
				Me._ih = value
				Me.SendPropertyChanged("ih")
				Me.OnihChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dlf", DbType:="NVarChar(50)")>  _
	Public Property dlf() As String
		Get
			Return Me._dlf
		End Get
		Set
			If (String.Equals(Me._dlf, value) = false) Then
				Me.OndlfChanging(value)
				Me.SendPropertyChanging
				Me._dlf = value
				Me.SendPropertyChanged("dlf")
				Me.OndlfChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hist", DbType:="NVarChar(50)")>  _
	Public Property hist() As String
		Get
			Return Me._hist
		End Get
		Set
			If (String.Equals(Me._hist, value) = false) Then
				Me.OnhistChanging(value)
				Me.SendPropertyChanging
				Me._hist = value
				Me.SendPropertyChanged("hist")
				Me.OnhistChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dpla", DbType:="NVarChar(50)")>  _
	Public Property dpla() As String
		Get
			Return Me._dpla
		End Get
		Set
			If (String.Equals(Me._dpla, value) = false) Then
				Me.OndplaChanging(value)
				Me.SendPropertyChanging
				Me._dpla = value
				Me.SendPropertyChanged("dpla")
				Me.OndplaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_physical", DbType:="Bit NOT NULL")>  _
	Public Property physical() As Boolean
		Get
			Return Me._physical
		End Get
		Set
			If ((Me._physical = value)  _
						= false) Then
				Me.OnphysicalChanging(value)
				Me.SendPropertyChanging
				Me._physical = value
				Me.SendPropertyChanged("physical")
				Me.OnphysicalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_portalCode", AutoSync:=AutoSync.Always, DbType:="TinyInt", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property portalCode() As System.Nullable(Of Byte)
		Get
			Return Me._portalCode
		End Get
		Set
			If (Me._portalCode.Equals(value) = false) Then
				Me.OnportalCodeChanging(value)
				Me.SendPropertyChanging
				Me._portalCode = value
				Me.SendPropertyChanged("portalCode")
				Me.OnportalCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Collection_CollectionProperty", Storage:="_CollectionProperties", ThisKey:="collectionID", OtherKey:="collectionID")>  _
	Public Property CollectionProperties() As EntitySet(Of CollectionProperty)
		Get
			Return Me._CollectionProperties
		End Get
		Set
			Me._CollectionProperties.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Collection_CollectionInstitution", Storage:="_CollectionInstitutions", ThisKey:="collectionID", OtherKey:="collectionID")>  _
	Public Property CollectionInstitutions() As EntitySet(Of CollectionInstitution)
		Get
			Return Me._CollectionInstitutions
		End Get
		Set
			Me._CollectionInstitutions.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CollectionProperties(ByVal entity As CollectionProperty)
		Me.SendPropertyChanging
		entity.Collection = Me
	End Sub
	
	Private Sub detach_CollectionProperties(ByVal entity As CollectionProperty)
		Me.SendPropertyChanging
		entity.Collection = Nothing
	End Sub
	
	Private Sub attach_CollectionInstitutions(ByVal entity As CollectionInstitution)
		Me.SendPropertyChanging
		entity.Collection = Me
	End Sub
	
	Private Sub detach_CollectionInstitutions(ByVal entity As CollectionInstitution)
		Me.SendPropertyChanging
		entity.Collection = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CollectionInstitutions")>  _
Partial Public Class CollectionInstitution
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _collectionInstitutionID As Integer
	
	Private _collectionID As Integer
	
	Private _institutionID As Integer
	
	Private _relationship As String
	
	Private _Collection As EntityRef(Of Collection)
	
	Private _Institution As EntityRef(Of Institution)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncollectionInstitutionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OncollectionInstitutionIDChanged()
    End Sub
    Partial Private Sub OncollectionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OncollectionIDChanged()
    End Sub
    Partial Private Sub OninstitutionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OninstitutionIDChanged()
    End Sub
    Partial Private Sub OnrelationshipChanging(value As String)
    End Sub
    Partial Private Sub OnrelationshipChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Collection = CType(Nothing, EntityRef(Of Collection))
		Me._Institution = CType(Nothing, EntityRef(Of Institution))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_collectionInstitutionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property collectionInstitutionID() As Integer
		Get
			Return Me._collectionInstitutionID
		End Get
		Set
			If ((Me._collectionInstitutionID = value)  _
						= false) Then
				Me.OncollectionInstitutionIDChanging(value)
				Me.SendPropertyChanging
				Me._collectionInstitutionID = value
				Me.SendPropertyChanged("collectionInstitutionID")
				Me.OncollectionInstitutionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_collectionID", DbType:="Int NOT NULL")>  _
	Public Property collectionID() As Integer
		Get
			Return Me._collectionID
		End Get
		Set
			If ((Me._collectionID = value)  _
						= false) Then
				If Me._Collection.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OncollectionIDChanging(value)
				Me.SendPropertyChanging
				Me._collectionID = value
				Me.SendPropertyChanged("collectionID")
				Me.OncollectionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_institutionID", DbType:="Int NOT NULL")>  _
	Public Property institutionID() As Integer
		Get
			Return Me._institutionID
		End Get
		Set
			If ((Me._institutionID = value)  _
						= false) Then
				If Me._Institution.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OninstitutionIDChanging(value)
				Me.SendPropertyChanging
				Me._institutionID = value
				Me.SendPropertyChanged("institutionID")
				Me.OninstitutionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_relationship", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property relationship() As String
		Get
			Return Me._relationship
		End Get
		Set
			If (String.Equals(Me._relationship, value) = false) Then
				Me.OnrelationshipChanging(value)
				Me.SendPropertyChanging
				Me._relationship = value
				Me.SendPropertyChanged("relationship")
				Me.OnrelationshipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Collection_CollectionInstitution", Storage:="_Collection", ThisKey:="collectionID", OtherKey:="collectionID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Collection() As Collection
		Get
			Return Me._Collection.Entity
		End Get
		Set
			Dim previousValue As Collection = Me._Collection.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Collection.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Collection.Entity = Nothing
					previousValue.CollectionInstitutions.Remove(Me)
				End If
				Me._Collection.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CollectionInstitutions.Add(Me)
					Me._collectionID = value.collectionID
				Else
					Me._collectionID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Collection")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Institution_CollectionInstitution", Storage:="_Institution", ThisKey:="institutionID", OtherKey:="institutionID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Institution() As Institution
		Get
			Return Me._Institution.Entity
		End Get
		Set
			Dim previousValue As Institution = Me._Institution.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Institution.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Institution.Entity = Nothing
					previousValue.CollectionInstitutions.Remove(Me)
				End If
				Me._Institution.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CollectionInstitutions.Add(Me)
					Me._institutionID = value.institutionID
				Else
					Me._institutionID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Institution")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Institutions")>  _
Partial Public Class Institution
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _institutionID As Integer
	
	Private _institutionName As String
	
	Private _InstitutionProperties As EntitySet(Of InstitutionProperty)
	
	Private _CollectionInstitutions As EntitySet(Of CollectionInstitution)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OninstitutionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OninstitutionIDChanged()
    End Sub
    Partial Private Sub OninstitutionNameChanging(value As String)
    End Sub
    Partial Private Sub OninstitutionNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._InstitutionProperties = New EntitySet(Of InstitutionProperty)(AddressOf Me.attach_InstitutionProperties, AddressOf Me.detach_InstitutionProperties)
		Me._CollectionInstitutions = New EntitySet(Of CollectionInstitution)(AddressOf Me.attach_CollectionInstitutions, AddressOf Me.detach_CollectionInstitutions)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_institutionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property institutionID() As Integer
		Get
			Return Me._institutionID
		End Get
		Set
			If ((Me._institutionID = value)  _
						= false) Then
				Me.OninstitutionIDChanging(value)
				Me.SendPropertyChanging
				Me._institutionID = value
				Me.SendPropertyChanged("institutionID")
				Me.OninstitutionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_institutionName", DbType:="NVarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property institutionName() As String
		Get
			Return Me._institutionName
		End Get
		Set
			If (String.Equals(Me._institutionName, value) = false) Then
				Me.OninstitutionNameChanging(value)
				Me.SendPropertyChanging
				Me._institutionName = value
				Me.SendPropertyChanged("institutionName")
				Me.OninstitutionNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Institution_InstitutionProperty", Storage:="_InstitutionProperties", ThisKey:="institutionID", OtherKey:="institutionID")>  _
	Public Property InstitutionProperties() As EntitySet(Of InstitutionProperty)
		Get
			Return Me._InstitutionProperties
		End Get
		Set
			Me._InstitutionProperties.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Institution_CollectionInstitution", Storage:="_CollectionInstitutions", ThisKey:="institutionID", OtherKey:="institutionID")>  _
	Public Property CollectionInstitutions() As EntitySet(Of CollectionInstitution)
		Get
			Return Me._CollectionInstitutions
		End Get
		Set
			Me._CollectionInstitutions.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_InstitutionProperties(ByVal entity As InstitutionProperty)
		Me.SendPropertyChanging
		entity.Institution = Me
	End Sub
	
	Private Sub detach_InstitutionProperties(ByVal entity As InstitutionProperty)
		Me.SendPropertyChanging
		entity.Institution = Nothing
	End Sub
	
	Private Sub attach_CollectionInstitutions(ByVal entity As CollectionInstitution)
		Me.SendPropertyChanging
		entity.Institution = Me
	End Sub
	
	Private Sub detach_CollectionInstitutions(ByVal entity As CollectionInstitution)
		Me.SendPropertyChanging
		entity.Institution = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ControlledVocabulary")>  _
Partial Public Class ControlledVocabulary
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _controlledVocabID As Integer
	
	Private _vocabularyName As String
	
	Private _word As String
	
	Private _displayOrder As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncontrolledVocabIDChanging(value As Integer)
    End Sub
    Partial Private Sub OncontrolledVocabIDChanged()
    End Sub
    Partial Private Sub OnvocabularyNameChanging(value As String)
    End Sub
    Partial Private Sub OnvocabularyNameChanged()
    End Sub
    Partial Private Sub OnwordChanging(value As String)
    End Sub
    Partial Private Sub OnwordChanged()
    End Sub
    Partial Private Sub OndisplayOrderChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndisplayOrderChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_controlledVocabID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property controlledVocabID() As Integer
		Get
			Return Me._controlledVocabID
		End Get
		Set
			If ((Me._controlledVocabID = value)  _
						= false) Then
				Me.OncontrolledVocabIDChanging(value)
				Me.SendPropertyChanging
				Me._controlledVocabID = value
				Me.SendPropertyChanged("controlledVocabID")
				Me.OncontrolledVocabIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vocabularyName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property vocabularyName() As String
		Get
			Return Me._vocabularyName
		End Get
		Set
			If (String.Equals(Me._vocabularyName, value) = false) Then
				Me.OnvocabularyNameChanging(value)
				Me.SendPropertyChanging
				Me._vocabularyName = value
				Me.SendPropertyChanged("vocabularyName")
				Me.OnvocabularyNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_word", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property word() As String
		Get
			Return Me._word
		End Get
		Set
			If (String.Equals(Me._word, value) = false) Then
				Me.OnwordChanging(value)
				Me.SendPropertyChanging
				Me._word = value
				Me.SendPropertyChanged("word")
				Me.OnwordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_displayOrder", DbType:="Int")>  _
	Public Property displayOrder() As System.Nullable(Of Integer)
		Get
			Return Me._displayOrder
		End Get
		Set
			If (Me._displayOrder.Equals(value) = false) Then
				Me.OndisplayOrderChanging(value)
				Me.SendPropertyChanging
				Me._displayOrder = value
				Me.SendPropertyChanged("displayOrder")
				Me.OndisplayOrderChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

Partial Public Class collCTQResult
	
	Private _collID As System.Nullable(Of Integer)
	
	Private _hitsInColl As System.Nullable(Of Integer)
	
	Private _ctRank As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_collID", DbType:="Int")>  _
	Public Property collID() As System.Nullable(Of Integer)
		Get
			Return Me._collID
		End Get
		Set
			If (Me._collID.Equals(value) = false) Then
				Me._collID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hitsInColl", DbType:="Int")>  _
	Public Property hitsInColl() As System.Nullable(Of Integer)
		Get
			Return Me._hitsInColl
		End Get
		Set
			If (Me._hitsInColl.Equals(value) = false) Then
				Me._hitsInColl = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ctRank", DbType:="Int")>  _
	Public Property ctRank() As System.Nullable(Of Integer)
		Get
			Return Me._ctRank
		End Get
		Set
			If (Me._ctRank.Equals(value) = false) Then
				Me._ctRank = value
			End If
		End Set
	End Property
End Class

Partial Public Class collectionDetailsResult
	
	Private _property As String
	
	Private _value As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="property", Storage:="_property", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property [property]() As String
		Get
			Return Me._property
		End Get
		Set
			If (String.Equals(Me._property, value) = false) Then
				Me._property = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_value", DbType:="NVarChar(3000) NOT NULL", CanBeNull:=false)>  _
	Public Property value() As String
		Get
			Return Me._value
		End Get
		Set
			If (String.Equals(Me._value, value) = false) Then
				Me._value = value
			End If
		End Set
	End Property
End Class
