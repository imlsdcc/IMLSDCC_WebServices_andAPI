'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.17929
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="test_IMLS_Items2")>  _
Partial Public Class IMLSDCCDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertType(instance As Type)
    End Sub
  Partial Private Sub UpdateType(instance As Type)
    End Sub
  Partial Private Sub DeleteType(instance As Type)
    End Sub
  Partial Private Sub InsertRecordsToSubject(instance As RecordsToSubject)
    End Sub
  Partial Private Sub UpdateRecordsToSubject(instance As RecordsToSubject)
    End Sub
  Partial Private Sub DeleteRecordsToSubject(instance As RecordsToSubject)
    End Sub
  Partial Private Sub InsertSubject(instance As Subject)
    End Sub
  Partial Private Sub UpdateSubject(instance As Subject)
    End Sub
  Partial Private Sub DeleteSubject(instance As Subject)
    End Sub
  Partial Private Sub InsertRecordsToTitleBrowse(instance As RecordsToTitleBrowse)
    End Sub
  Partial Private Sub UpdateRecordsToTitleBrowse(instance As RecordsToTitleBrowse)
    End Sub
  Partial Private Sub DeleteRecordsToTitleBrowse(instance As RecordsToTitleBrowse)
    End Sub
  Partial Private Sub InsertRecordsToFacet(instance As RecordsToFacet)
    End Sub
  Partial Private Sub UpdateRecordsToFacet(instance As RecordsToFacet)
    End Sub
  Partial Private Sub DeleteRecordsToFacet(instance As RecordsToFacet)
    End Sub
  Partial Private Sub InsertRecordsToCollection(instance As RecordsToCollection)
    End Sub
  Partial Private Sub UpdateRecordsToCollection(instance As RecordsToCollection)
    End Sub
  Partial Private Sub DeleteRecordsToCollection(instance As RecordsToCollection)
    End Sub
  Partial Private Sub InsertFacet(instance As Facet)
    End Sub
  Partial Private Sub UpdateFacet(instance As Facet)
    End Sub
  Partial Private Sub DeleteFacet(instance As Facet)
    End Sub
  Partial Private Sub InsertCollectionsToThumbnail(instance As CollectionsToThumbnail)
    End Sub
  Partial Private Sub UpdateCollectionsToThumbnail(instance As CollectionsToThumbnail)
    End Sub
  Partial Private Sub DeleteCollectionsToThumbnail(instance As CollectionsToThumbnail)
    End Sub
  Partial Private Sub InsertRecord(instance As Record)
    End Sub
  Partial Private Sub UpdateRecord(instance As Record)
    End Sub
  Partial Private Sub DeleteRecord(instance As Record)
    End Sub
  Partial Private Sub InsertDateBrowse(instance As DateBrowse)
    End Sub
  Partial Private Sub UpdateDateBrowse(instance As DateBrowse)
    End Sub
  Partial Private Sub DeleteDateBrowse(instance As DateBrowse)
    End Sub
  Partial Private Sub InsertRecordsToDateBrowse(instance As RecordsToDateBrowse)
    End Sub
  Partial Private Sub UpdateRecordsToDateBrowse(instance As RecordsToDateBrowse)
    End Sub
  Partial Private Sub DeleteRecordsToDateBrowse(instance As RecordsToDateBrowse)
    End Sub
  Partial Private Sub InsertCollectionsToFacet(instance As CollectionsToFacet)
    End Sub
  Partial Private Sub UpdateCollectionsToFacet(instance As CollectionsToFacet)
    End Sub
  Partial Private Sub DeleteCollectionsToFacet(instance As CollectionsToFacet)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("test_IMLS_Items2ConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property RecordsToTypes() As System.Data.Linq.Table(Of RecordsToType)
		Get
			Return Me.GetTable(Of RecordsToType)
		End Get
	End Property
	
	Public ReadOnly Property Types() As System.Data.Linq.Table(Of Type)
		Get
			Return Me.GetTable(Of Type)
		End Get
	End Property
	
	Public ReadOnly Property RecordsToSubjects() As System.Data.Linq.Table(Of RecordsToSubject)
		Get
			Return Me.GetTable(Of RecordsToSubject)
		End Get
	End Property
	
	Public ReadOnly Property Subjects() As System.Data.Linq.Table(Of Subject)
		Get
			Return Me.GetTable(Of Subject)
		End Get
	End Property
	
	Public ReadOnly Property RecordsToTitleBrowses() As System.Data.Linq.Table(Of RecordsToTitleBrowse)
		Get
			Return Me.GetTable(Of RecordsToTitleBrowse)
		End Get
	End Property
	
	Public ReadOnly Property RecordsToFacets() As System.Data.Linq.Table(Of RecordsToFacet)
		Get
			Return Me.GetTable(Of RecordsToFacet)
		End Get
	End Property
	
	Public ReadOnly Property RecordsToCollections() As System.Data.Linq.Table(Of RecordsToCollection)
		Get
			Return Me.GetTable(Of RecordsToCollection)
		End Get
	End Property
	
	Public ReadOnly Property Facets() As System.Data.Linq.Table(Of Facet)
		Get
			Return Me.GetTable(Of Facet)
		End Get
	End Property
	
	Public ReadOnly Property CollectionsToThumbnails() As System.Data.Linq.Table(Of CollectionsToThumbnail)
		Get
			Return Me.GetTable(Of CollectionsToThumbnail)
		End Get
	End Property
	
	Public ReadOnly Property Records() As System.Data.Linq.Table(Of Record)
		Get
			Return Me.GetTable(Of Record)
		End Get
	End Property
	
	Public ReadOnly Property DateBrowses() As System.Data.Linq.Table(Of DateBrowse)
		Get
			Return Me.GetTable(Of DateBrowse)
		End Get
	End Property
	
	Public ReadOnly Property RecordsToDateBrowses() As System.Data.Linq.Table(Of RecordsToDateBrowse)
		Get
			Return Me.GetTable(Of RecordsToDateBrowse)
		End Get
	End Property
	
	Public ReadOnly Property CollectionsToFacets() As System.Data.Linq.Table(Of CollectionsToFacet)
		Get
			Return Me.GetTable(Of CollectionsToFacet)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ItemCount", IsComposable:=true)>  _
	Public Function ItemCount(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(256)")> ByVal phrase As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(256)")> ByVal queryType As String) As System.Nullable(Of Integer)
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), phrase, queryType).ReturnValue,System.Nullable(Of Integer))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.cTQWithPCOnly", IsComposable:=true)>  _
	Public Function cTQWithPCOnly(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(255)")> ByVal phrase As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(255)")> ByVal queryType As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal top_n As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal collectionID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal portalCode As System.Nullable(Of Integer)) As IQueryable(Of cTQWithPCOnlyResult)
		Return Me.CreateMethodCallQuery(Of cTQWithPCOnlyResult)(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), phrase, queryType, top_n, collectionID, portalCode)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CollectionDetails", IsComposable:=true)>  _
	Public Function CollectionDetails(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal identifier As System.Nullable(Of Integer)) As Object
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), identifier).ReturnValue,Object)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFacetsCTQ", IsComposable:=true)>  _
	Public Function GetFacetsCTQ(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(255)")> ByVal phrase As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(255)")> ByVal queryType As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal top_n As System.Nullable(Of Integer)) As IQueryable(Of GetFacetsCTQResult)
		Return Me.CreateMethodCallQuery(Of GetFacetsCTQResult)(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), phrase, queryType, top_n)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetFacetsCTQ2", IsComposable:=true)>  _
	Public Function GetFacetsCTQ2(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(255)")> ByVal phrase As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(255)")> ByVal queryType As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal top_n As System.Nullable(Of Integer)) As IQueryable(Of GetFacetsCTQ2Result)
		Return Me.CreateMethodCallQuery(Of GetFacetsCTQ2Result)(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), phrase, queryType, top_n)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetStateCount")>  _
	Public Function GetStateCount() As ISingleResult(Of GetStateCountResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetStateCountResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.cTQWith3Facet", IsComposable:=true)>  _
	Public Function cTQWith3Facet(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(255)")> ByVal phrase As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(255)")> ByVal queryType As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal top_n As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal collectionID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal portalCode As System.Nullable(Of Byte), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(255)")> ByVal facetIn As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(255)")> ByVal facetIn2 As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(255)")> ByVal facetIn3 As String) As IQueryable(Of cTQWith3FacetResult)
		Return Me.CreateMethodCallQuery(Of cTQWith3FacetResult)(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), phrase, queryType, top_n, collectionID, portalCode, facetIn, facetIn2, facetIn3)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.cTQWith1Facet", IsComposable:=true)>  _
	Public Function cTQWith1Facet(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(255)")> ByVal phrase As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(255)")> ByVal queryType As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal top_n As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal collectionID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal portalCode As System.Nullable(Of Byte), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(255)")> ByVal facetIn As String) As IQueryable(Of cTQWith1FacetResult)
		Return Me.CreateMethodCallQuery(Of cTQWith1FacetResult)(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), phrase, queryType, top_n, collectionID, portalCode, facetIn)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.cTQWith2Facet", IsComposable:=true)>  _
	Public Function cTQWith2Facet(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(255)")> ByVal phrase As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(255)")> ByVal queryType As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal top_n As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal collectionID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal portalCode As System.Nullable(Of Byte), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(255)")> ByVal facetIn As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(255)")> ByVal facetIn2 As String) As IQueryable(Of cTQWith2FacetResult)
		Return Me.CreateMethodCallQuery(Of cTQWith2FacetResult)(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), phrase, queryType, top_n, collectionID, portalCode, facetIn, facetIn2)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.containsTableQuery", IsComposable:=true)>  _
	Public Function containsTableQuery(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(255)")> ByVal phrase As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(255)")> ByVal queryType As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal top_n As System.Nullable(Of Integer)) As IQueryable(Of containsTableQueryResult)
		Return Me.CreateMethodCallQuery(Of containsTableQueryResult)(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), phrase, queryType, top_n)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetSubjectCount")>  _
	Public Function GetSubjectCount() As ISingleResult(Of GetSubjectCountResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetSubjectCountResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetStats")>  _
	Public Function GetStats() As ISingleResult(Of GetStatsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetStatsResult))
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RecordsToTypes")>  _
Partial Public Class RecordsToType
	
	Private _recordID As Integer
	
	Private _typeID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recordID", DbType:="Int NOT NULL")>  _
	Public Property recordID() As Integer
		Get
			Return Me._recordID
		End Get
		Set
			If ((Me._recordID = value)  _
						= false) Then
				Me._recordID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_typeID", DbType:="Int NOT NULL")>  _
	Public Property typeID() As Integer
		Get
			Return Me._typeID
		End Get
		Set
			If ((Me._typeID = value)  _
						= false) Then
				Me._typeID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Types")>  _
Partial Public Class Type
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _typeID As Integer
	
	Private _typeText As String
	
	Private _typeNoPunct As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OntypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OntypeIDChanged()
    End Sub
    Partial Private Sub OntypeTextChanging(value As String)
    End Sub
    Partial Private Sub OntypeTextChanged()
    End Sub
    Partial Private Sub OntypeNoPunctChanging(value As String)
    End Sub
    Partial Private Sub OntypeNoPunctChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_typeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property typeID() As Integer
		Get
			Return Me._typeID
		End Get
		Set
			If ((Me._typeID = value)  _
						= false) Then
				Me.OntypeIDChanging(value)
				Me.SendPropertyChanging
				Me._typeID = value
				Me.SendPropertyChanged("typeID")
				Me.OntypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_typeText", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property typeText() As String
		Get
			Return Me._typeText
		End Get
		Set
			If (String.Equals(Me._typeText, value) = false) Then
				Me.OntypeTextChanging(value)
				Me.SendPropertyChanging
				Me._typeText = value
				Me.SendPropertyChanged("typeText")
				Me.OntypeTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_typeNoPunct", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property typeNoPunct() As String
		Get
			Return Me._typeNoPunct
		End Get
		Set
			If (String.Equals(Me._typeNoPunct, value) = false) Then
				Me.OntypeNoPunctChanging(value)
				Me.SendPropertyChanging
				Me._typeNoPunct = value
				Me.SendPropertyChanged("typeNoPunct")
				Me.OntypeNoPunctChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RecordsToSubjects")>  _
Partial Public Class RecordsToSubject
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _recordID As Integer
	
	Private _subjectID As Integer
	
	Private _Subject As EntityRef(Of Subject)
	
	Private _Record As EntityRef(Of Record)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnrecordIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnrecordIDChanged()
    End Sub
    Partial Private Sub OnsubjectIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnsubjectIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Subject = CType(Nothing, EntityRef(Of Subject))
		Me._Record = CType(Nothing, EntityRef(Of Record))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recordID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property recordID() As Integer
		Get
			Return Me._recordID
		End Get
		Set
			If ((Me._recordID = value)  _
						= false) Then
				If Me._Record.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnrecordIDChanging(value)
				Me.SendPropertyChanging
				Me._recordID = value
				Me.SendPropertyChanged("recordID")
				Me.OnrecordIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subjectID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property subjectID() As Integer
		Get
			Return Me._subjectID
		End Get
		Set
			If ((Me._subjectID = value)  _
						= false) Then
				If Me._Subject.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnsubjectIDChanging(value)
				Me.SendPropertyChanging
				Me._subjectID = value
				Me.SendPropertyChanged("subjectID")
				Me.OnsubjectIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Subject_RecordsToSubject", Storage:="_Subject", ThisKey:="subjectID", OtherKey:="subjectID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Subject() As Subject
		Get
			Return Me._Subject.Entity
		End Get
		Set
			Dim previousValue As Subject = Me._Subject.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Subject.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Subject.Entity = Nothing
					previousValue.RecordsToSubjects.Remove(Me)
				End If
				Me._Subject.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RecordsToSubjects.Add(Me)
					Me._subjectID = value.subjectID
				Else
					Me._subjectID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Subject")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Record_RecordsToSubject", Storage:="_Record", ThisKey:="recordID", OtherKey:="recordID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Record() As Record
		Get
			Return Me._Record.Entity
		End Get
		Set
			Dim previousValue As Record = Me._Record.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Record.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Record.Entity = Nothing
					previousValue.RecordsToSubjects.Remove(Me)
				End If
				Me._Record.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RecordsToSubjects.Add(Me)
					Me._recordID = value.recordID
				Else
					Me._recordID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Record")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Subjects")>  _
Partial Public Class Subject
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _subjectID As Integer
	
	Private _subjectText As String
	
	Private _subjectNoPunct As String
	
	Private _RecordsToSubjects As EntitySet(Of RecordsToSubject)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnsubjectIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnsubjectIDChanged()
    End Sub
    Partial Private Sub OnsubjectTextChanging(value As String)
    End Sub
    Partial Private Sub OnsubjectTextChanged()
    End Sub
    Partial Private Sub OnsubjectNoPunctChanging(value As String)
    End Sub
    Partial Private Sub OnsubjectNoPunctChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._RecordsToSubjects = New EntitySet(Of RecordsToSubject)(AddressOf Me.attach_RecordsToSubjects, AddressOf Me.detach_RecordsToSubjects)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subjectID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property subjectID() As Integer
		Get
			Return Me._subjectID
		End Get
		Set
			If ((Me._subjectID = value)  _
						= false) Then
				Me.OnsubjectIDChanging(value)
				Me.SendPropertyChanging
				Me._subjectID = value
				Me.SendPropertyChanged("subjectID")
				Me.OnsubjectIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subjectText", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property subjectText() As String
		Get
			Return Me._subjectText
		End Get
		Set
			If (String.Equals(Me._subjectText, value) = false) Then
				Me.OnsubjectTextChanging(value)
				Me.SendPropertyChanging
				Me._subjectText = value
				Me.SendPropertyChanged("subjectText")
				Me.OnsubjectTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subjectNoPunct", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property subjectNoPunct() As String
		Get
			Return Me._subjectNoPunct
		End Get
		Set
			If (String.Equals(Me._subjectNoPunct, value) = false) Then
				Me.OnsubjectNoPunctChanging(value)
				Me.SendPropertyChanging
				Me._subjectNoPunct = value
				Me.SendPropertyChanged("subjectNoPunct")
				Me.OnsubjectNoPunctChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Subject_RecordsToSubject", Storage:="_RecordsToSubjects", ThisKey:="subjectID", OtherKey:="subjectID")>  _
	Public Property RecordsToSubjects() As EntitySet(Of RecordsToSubject)
		Get
			Return Me._RecordsToSubjects
		End Get
		Set
			Me._RecordsToSubjects.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_RecordsToSubjects(ByVal entity As RecordsToSubject)
		Me.SendPropertyChanging
		entity.Subject = Me
	End Sub
	
	Private Sub detach_RecordsToSubjects(ByVal entity As RecordsToSubject)
		Me.SendPropertyChanging
		entity.Subject = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RecordsToTitleBrowse")>  _
Partial Public Class RecordsToTitleBrowse
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _titlePivotRow As Integer
	
	Private _titleID As Integer
	
	Private _recordID As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OntitlePivotRowChanging(value As Integer)
    End Sub
    Partial Private Sub OntitlePivotRowChanged()
    End Sub
    Partial Private Sub OntitleIDChanging(value As Integer)
    End Sub
    Partial Private Sub OntitleIDChanged()
    End Sub
    Partial Private Sub OnrecordIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnrecordIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_titlePivotRow", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property titlePivotRow() As Integer
		Get
			Return Me._titlePivotRow
		End Get
		Set
			If ((Me._titlePivotRow = value)  _
						= false) Then
				Me.OntitlePivotRowChanging(value)
				Me.SendPropertyChanging
				Me._titlePivotRow = value
				Me.SendPropertyChanged("titlePivotRow")
				Me.OntitlePivotRowChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_titleID", DbType:="Int NOT NULL")>  _
	Public Property titleID() As Integer
		Get
			Return Me._titleID
		End Get
		Set
			If ((Me._titleID = value)  _
						= false) Then
				Me.OntitleIDChanging(value)
				Me.SendPropertyChanging
				Me._titleID = value
				Me.SendPropertyChanged("titleID")
				Me.OntitleIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recordID", DbType:="Int NOT NULL")>  _
	Public Property recordID() As Integer
		Get
			Return Me._recordID
		End Get
		Set
			If ((Me._recordID = value)  _
						= false) Then
				Me.OnrecordIDChanging(value)
				Me.SendPropertyChanging
				Me._recordID = value
				Me.SendPropertyChanged("recordID")
				Me.OnrecordIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RecordsToFacets")>  _
Partial Public Class RecordsToFacet
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _facetID As Integer
	
	Private _recordID As Integer
	
	Private _Facet As EntityRef(Of Facet)
	
	Private _Record As EntityRef(Of Record)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnfacetIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnfacetIDChanged()
    End Sub
    Partial Private Sub OnrecordIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnrecordIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Facet = CType(Nothing, EntityRef(Of Facet))
		Me._Record = CType(Nothing, EntityRef(Of Record))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_facetID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property facetID() As Integer
		Get
			Return Me._facetID
		End Get
		Set
			If ((Me._facetID = value)  _
						= false) Then
				If Me._Facet.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnfacetIDChanging(value)
				Me.SendPropertyChanging
				Me._facetID = value
				Me.SendPropertyChanged("facetID")
				Me.OnfacetIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recordID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property recordID() As Integer
		Get
			Return Me._recordID
		End Get
		Set
			If ((Me._recordID = value)  _
						= false) Then
				If Me._Record.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnrecordIDChanging(value)
				Me.SendPropertyChanging
				Me._recordID = value
				Me.SendPropertyChanged("recordID")
				Me.OnrecordIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Facet_RecordsToFacet", Storage:="_Facet", ThisKey:="facetID", OtherKey:="facetID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Facet() As Facet
		Get
			Return Me._Facet.Entity
		End Get
		Set
			Dim previousValue As Facet = Me._Facet.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Facet.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Facet.Entity = Nothing
					previousValue.RecordsToFacets.Remove(Me)
				End If
				Me._Facet.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RecordsToFacets.Add(Me)
					Me._facetID = value.facetID
				Else
					Me._facetID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Facet")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Record_RecordsToFacet", Storage:="_Record", ThisKey:="recordID", OtherKey:="recordID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Record() As Record
		Get
			Return Me._Record.Entity
		End Get
		Set
			Dim previousValue As Record = Me._Record.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Record.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Record.Entity = Nothing
					previousValue.RecordsToFacets.Remove(Me)
				End If
				Me._Record.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RecordsToFacets.Add(Me)
					Me._recordID = value.recordID
				Else
					Me._recordID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Record")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RecordsToCollections")>  _
Partial Public Class RecordsToCollection
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RecToCollID As Integer
	
	Private _collID As System.Nullable(Of Integer)
	
	Private _recordID As System.Nullable(Of Integer)
	
	Private _oaiIdentifier As String
	
	Private _code As String
	
	Private _Record As EntityRef(Of Record)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRecToCollIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRecToCollIDChanged()
    End Sub
    Partial Private Sub OncollIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OncollIDChanged()
    End Sub
    Partial Private Sub OnrecordIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnrecordIDChanged()
    End Sub
    Partial Private Sub OnoaiIdentifierChanging(value As String)
    End Sub
    Partial Private Sub OnoaiIdentifierChanged()
    End Sub
    Partial Private Sub OncodeChanging(value As String)
    End Sub
    Partial Private Sub OncodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Record = CType(Nothing, EntityRef(Of Record))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecToCollID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property RecToCollID() As Integer
		Get
			Return Me._RecToCollID
		End Get
		Set
			If ((Me._RecToCollID = value)  _
						= false) Then
				Me.OnRecToCollIDChanging(value)
				Me.SendPropertyChanging
				Me._RecToCollID = value
				Me.SendPropertyChanged("RecToCollID")
				Me.OnRecToCollIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_collID", DbType:="Int")>  _
	Public Property collID() As System.Nullable(Of Integer)
		Get
			Return Me._collID
		End Get
		Set
			If (Me._collID.Equals(value) = false) Then
				Me.OncollIDChanging(value)
				Me.SendPropertyChanging
				Me._collID = value
				Me.SendPropertyChanged("collID")
				Me.OncollIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recordID", DbType:="Int")>  _
	Public Property recordID() As System.Nullable(Of Integer)
		Get
			Return Me._recordID
		End Get
		Set
			If (Me._recordID.Equals(value) = false) Then
				If Me._Record.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnrecordIDChanging(value)
				Me.SendPropertyChanging
				Me._recordID = value
				Me.SendPropertyChanged("recordID")
				Me.OnrecordIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_oaiIdentifier", DbType:="NVarChar(250)")>  _
	Public Property oaiIdentifier() As String
		Get
			Return Me._oaiIdentifier
		End Get
		Set
			If (String.Equals(Me._oaiIdentifier, value) = false) Then
				Me.OnoaiIdentifierChanging(value)
				Me.SendPropertyChanging
				Me._oaiIdentifier = value
				Me.SendPropertyChanged("oaiIdentifier")
				Me.OnoaiIdentifierChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_code", DbType:="NVarChar(250)")>  _
	Public Property code() As String
		Get
			Return Me._code
		End Get
		Set
			If (String.Equals(Me._code, value) = false) Then
				Me.OncodeChanging(value)
				Me.SendPropertyChanging
				Me._code = value
				Me.SendPropertyChanged("code")
				Me.OncodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Record_RecordsToCollection", Storage:="_Record", ThisKey:="recordID", OtherKey:="recordID", IsForeignKey:=true, DeleteRule:="CASCADE")>  _
	Public Property Record() As Record
		Get
			Return Me._Record.Entity
		End Get
		Set
			Dim previousValue As Record = Me._Record.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Record.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Record.Entity = Nothing
					previousValue.RecordsToCollections.Remove(Me)
				End If
				Me._Record.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RecordsToCollections.Add(Me)
					Me._recordID = value.recordID
				Else
					Me._recordID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Record")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Facets")>  _
Partial Public Class Facet
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _facetID As Integer
	
	Private _facetValue As String
	
	Private _parentFacet As System.Nullable(Of Integer)
	
	Private _facetType As String
	
	Private _RecordsToFacets As EntitySet(Of RecordsToFacet)
	
	Private _CollectionsToFacets As EntitySet(Of CollectionsToFacet)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnfacetIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnfacetIDChanged()
    End Sub
    Partial Private Sub OnfacetValueChanging(value As String)
    End Sub
    Partial Private Sub OnfacetValueChanged()
    End Sub
    Partial Private Sub OnparentFacetChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnparentFacetChanged()
    End Sub
    Partial Private Sub OnfacetTypeChanging(value As String)
    End Sub
    Partial Private Sub OnfacetTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._RecordsToFacets = New EntitySet(Of RecordsToFacet)(AddressOf Me.attach_RecordsToFacets, AddressOf Me.detach_RecordsToFacets)
		Me._CollectionsToFacets = New EntitySet(Of CollectionsToFacet)(AddressOf Me.attach_CollectionsToFacets, AddressOf Me.detach_CollectionsToFacets)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_facetID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property facetID() As Integer
		Get
			Return Me._facetID
		End Get
		Set
			If ((Me._facetID = value)  _
						= false) Then
				Me.OnfacetIDChanging(value)
				Me.SendPropertyChanging
				Me._facetID = value
				Me.SendPropertyChanged("facetID")
				Me.OnfacetIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_facetValue", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property facetValue() As String
		Get
			Return Me._facetValue
		End Get
		Set
			If (String.Equals(Me._facetValue, value) = false) Then
				Me.OnfacetValueChanging(value)
				Me.SendPropertyChanging
				Me._facetValue = value
				Me.SendPropertyChanged("facetValue")
				Me.OnfacetValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_parentFacet", DbType:="Int")>  _
	Public Property parentFacet() As System.Nullable(Of Integer)
		Get
			Return Me._parentFacet
		End Get
		Set
			If (Me._parentFacet.Equals(value) = false) Then
				Me.OnparentFacetChanging(value)
				Me.SendPropertyChanging
				Me._parentFacet = value
				Me.SendPropertyChanged("parentFacet")
				Me.OnparentFacetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_facetType", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property facetType() As String
		Get
			Return Me._facetType
		End Get
		Set
			If (String.Equals(Me._facetType, value) = false) Then
				Me.OnfacetTypeChanging(value)
				Me.SendPropertyChanging
				Me._facetType = value
				Me.SendPropertyChanged("facetType")
				Me.OnfacetTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Facet_RecordsToFacet", Storage:="_RecordsToFacets", ThisKey:="facetID", OtherKey:="facetID")>  _
	Public Property RecordsToFacets() As EntitySet(Of RecordsToFacet)
		Get
			Return Me._RecordsToFacets
		End Get
		Set
			Me._RecordsToFacets.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Facet_CollectionsToFacet", Storage:="_CollectionsToFacets", ThisKey:="facetID", OtherKey:="facetID")>  _
	Public Property CollectionsToFacets() As EntitySet(Of CollectionsToFacet)
		Get
			Return Me._CollectionsToFacets
		End Get
		Set
			Me._CollectionsToFacets.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_RecordsToFacets(ByVal entity As RecordsToFacet)
		Me.SendPropertyChanging
		entity.Facet = Me
	End Sub
	
	Private Sub detach_RecordsToFacets(ByVal entity As RecordsToFacet)
		Me.SendPropertyChanging
		entity.Facet = Nothing
	End Sub
	
	Private Sub attach_CollectionsToFacets(ByVal entity As CollectionsToFacet)
		Me.SendPropertyChanging
		entity.Facet = Me
	End Sub
	
	Private Sub detach_CollectionsToFacets(ByVal entity As CollectionsToFacet)
		Me.SendPropertyChanging
		entity.Facet = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CollectionsToThumbnails")>  _
Partial Public Class CollectionsToThumbnail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _collID As Integer
	
	Private _oaiidentifier1 As String
	
	Private _oaiidentifier2 As String
	
	Private _oaiidentifier3 As String
	
	Private _oaiidentifier4 As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncollIDChanging(value As Integer)
    End Sub
    Partial Private Sub OncollIDChanged()
    End Sub
    Partial Private Sub Onoaiidentifier1Changing(value As String)
    End Sub
    Partial Private Sub Onoaiidentifier1Changed()
    End Sub
    Partial Private Sub Onoaiidentifier2Changing(value As String)
    End Sub
    Partial Private Sub Onoaiidentifier2Changed()
    End Sub
    Partial Private Sub Onoaiidentifier3Changing(value As String)
    End Sub
    Partial Private Sub Onoaiidentifier3Changed()
    End Sub
    Partial Private Sub Onoaiidentifier4Changing(value As String)
    End Sub
    Partial Private Sub Onoaiidentifier4Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_collID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property collID() As Integer
		Get
			Return Me._collID
		End Get
		Set
			If ((Me._collID = value)  _
						= false) Then
				Me.OncollIDChanging(value)
				Me.SendPropertyChanging
				Me._collID = value
				Me.SendPropertyChanged("collID")
				Me.OncollIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_oaiidentifier1", DbType:="NVarChar(250)")>  _
	Public Property oaiidentifier1() As String
		Get
			Return Me._oaiidentifier1
		End Get
		Set
			If (String.Equals(Me._oaiidentifier1, value) = false) Then
				Me.Onoaiidentifier1Changing(value)
				Me.SendPropertyChanging
				Me._oaiidentifier1 = value
				Me.SendPropertyChanged("oaiidentifier1")
				Me.Onoaiidentifier1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_oaiidentifier2", DbType:="NVarChar(250)")>  _
	Public Property oaiidentifier2() As String
		Get
			Return Me._oaiidentifier2
		End Get
		Set
			If (String.Equals(Me._oaiidentifier2, value) = false) Then
				Me.Onoaiidentifier2Changing(value)
				Me.SendPropertyChanging
				Me._oaiidentifier2 = value
				Me.SendPropertyChanged("oaiidentifier2")
				Me.Onoaiidentifier2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_oaiidentifier3", DbType:="NVarChar(250)")>  _
	Public Property oaiidentifier3() As String
		Get
			Return Me._oaiidentifier3
		End Get
		Set
			If (String.Equals(Me._oaiidentifier3, value) = false) Then
				Me.Onoaiidentifier3Changing(value)
				Me.SendPropertyChanging
				Me._oaiidentifier3 = value
				Me.SendPropertyChanged("oaiidentifier3")
				Me.Onoaiidentifier3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_oaiidentifier4", DbType:="NVarChar(250)")>  _
	Public Property oaiidentifier4() As String
		Get
			Return Me._oaiidentifier4
		End Get
		Set
			If (String.Equals(Me._oaiidentifier4, value) = false) Then
				Me.Onoaiidentifier4Changing(value)
				Me.SendPropertyChanging
				Me._oaiidentifier4 = value
				Me.SendPropertyChanged("oaiidentifier4")
				Me.Onoaiidentifier4Changed
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Records")>  _
Partial Public Class Record
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _recordID As Integer
	
	Private _repoID As System.Nullable(Of Integer)
	
	Private _cid As System.Nullable(Of Integer)
	
	Private _identifier As String
	
	Private _datestamp As System.Nullable(Of Date)
	
	Private _status As String
	
	Private _filePath As String
	
	Private _harvestDate As System.Nullable(Of Date)
	
	Private _prov_repositoryID As String
	
	Private _prov_datestamp As System.Nullable(Of Date)
	
	Private _prov_baseURL As String
	
	Private _searchXML As System.Xml.Linq.XElement
	
	Private _shortXML As System.Xml.Linq.XElement
	
	Private _longXML As System.Xml.Linq.XElement
	
	Private _AquiferOAIIdentifier As String
	
	Private _title As System.Xml.Linq.XElement
	
	Private _creator As System.Xml.Linq.XElement
	
	Private _subject As System.Xml.Linq.XElement
	
	Private _titleText As String
	
	Private _titleNoPunct As String
	
	Private _parent_description As String
	
	Private _portalCode As System.Nullable(Of Byte)
	
	Private _RecordsToSubjects As EntitySet(Of RecordsToSubject)
	
	Private _RecordsToFacets As EntitySet(Of RecordsToFacet)
	
	Private _RecordsToCollections As EntitySet(Of RecordsToCollection)
	
	Private _RecordsToDateBrowses As EntitySet(Of RecordsToDateBrowse)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnrecordIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnrecordIDChanged()
    End Sub
    Partial Private Sub OnrepoIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnrepoIDChanged()
    End Sub
    Partial Private Sub OncidChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OncidChanged()
    End Sub
    Partial Private Sub OnidentifierChanging(value As String)
    End Sub
    Partial Private Sub OnidentifierChanged()
    End Sub
    Partial Private Sub OndatestampChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OndatestampChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OnfilePathChanging(value As String)
    End Sub
    Partial Private Sub OnfilePathChanged()
    End Sub
    Partial Private Sub OnharvestDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnharvestDateChanged()
    End Sub
    Partial Private Sub Onprov_repositoryIDChanging(value As String)
    End Sub
    Partial Private Sub Onprov_repositoryIDChanged()
    End Sub
    Partial Private Sub Onprov_datestampChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onprov_datestampChanged()
    End Sub
    Partial Private Sub Onprov_baseURLChanging(value As String)
    End Sub
    Partial Private Sub Onprov_baseURLChanged()
    End Sub
    Partial Private Sub OnsearchXMLChanging(value As System.Xml.Linq.XElement)
    End Sub
    Partial Private Sub OnsearchXMLChanged()
    End Sub
    Partial Private Sub OnshortXMLChanging(value As System.Xml.Linq.XElement)
    End Sub
    Partial Private Sub OnshortXMLChanged()
    End Sub
    Partial Private Sub OnlongXMLChanging(value As System.Xml.Linq.XElement)
    End Sub
    Partial Private Sub OnlongXMLChanged()
    End Sub
    Partial Private Sub OnAquiferOAIIdentifierChanging(value As String)
    End Sub
    Partial Private Sub OnAquiferOAIIdentifierChanged()
    End Sub
    Partial Private Sub OntitleChanging(value As System.Xml.Linq.XElement)
    End Sub
    Partial Private Sub OntitleChanged()
    End Sub
    Partial Private Sub OncreatorChanging(value As System.Xml.Linq.XElement)
    End Sub
    Partial Private Sub OncreatorChanged()
    End Sub
    Partial Private Sub OnsubjectChanging(value As System.Xml.Linq.XElement)
    End Sub
    Partial Private Sub OnsubjectChanged()
    End Sub
    Partial Private Sub OntitleTextChanging(value As String)
    End Sub
    Partial Private Sub OntitleTextChanged()
    End Sub
    Partial Private Sub OntitleNoPunctChanging(value As String)
    End Sub
    Partial Private Sub OntitleNoPunctChanged()
    End Sub
    Partial Private Sub Onparent_descriptionChanging(value As String)
    End Sub
    Partial Private Sub Onparent_descriptionChanged()
    End Sub
    Partial Private Sub OnportalCodeChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnportalCodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._RecordsToSubjects = New EntitySet(Of RecordsToSubject)(AddressOf Me.attach_RecordsToSubjects, AddressOf Me.detach_RecordsToSubjects)
		Me._RecordsToFacets = New EntitySet(Of RecordsToFacet)(AddressOf Me.attach_RecordsToFacets, AddressOf Me.detach_RecordsToFacets)
		Me._RecordsToCollections = New EntitySet(Of RecordsToCollection)(AddressOf Me.attach_RecordsToCollections, AddressOf Me.detach_RecordsToCollections)
		Me._RecordsToDateBrowses = New EntitySet(Of RecordsToDateBrowse)(AddressOf Me.attach_RecordsToDateBrowses, AddressOf Me.detach_RecordsToDateBrowses)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recordID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property recordID() As Integer
		Get
			Return Me._recordID
		End Get
		Set
			If ((Me._recordID = value)  _
						= false) Then
				Me.OnrecordIDChanging(value)
				Me.SendPropertyChanging
				Me._recordID = value
				Me.SendPropertyChanged("recordID")
				Me.OnrecordIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_repoID", DbType:="Int")>  _
	Public Property repoID() As System.Nullable(Of Integer)
		Get
			Return Me._repoID
		End Get
		Set
			If (Me._repoID.Equals(value) = false) Then
				Me.OnrepoIDChanging(value)
				Me.SendPropertyChanging
				Me._repoID = value
				Me.SendPropertyChanged("repoID")
				Me.OnrepoIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cid", DbType:="Int")>  _
	Public Property cid() As System.Nullable(Of Integer)
		Get
			Return Me._cid
		End Get
		Set
			If (Me._cid.Equals(value) = false) Then
				Me.OncidChanging(value)
				Me.SendPropertyChanging
				Me._cid = value
				Me.SendPropertyChanged("cid")
				Me.OncidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_identifier", DbType:="NVarChar(250)")>  _
	Public Property identifier() As String
		Get
			Return Me._identifier
		End Get
		Set
			If (String.Equals(Me._identifier, value) = false) Then
				Me.OnidentifierChanging(value)
				Me.SendPropertyChanging
				Me._identifier = value
				Me.SendPropertyChanged("identifier")
				Me.OnidentifierChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_datestamp", DbType:="DateTime")>  _
	Public Property datestamp() As System.Nullable(Of Date)
		Get
			Return Me._datestamp
		End Get
		Set
			If (Me._datestamp.Equals(value) = false) Then
				Me.OndatestampChanging(value)
				Me.SendPropertyChanging
				Me._datestamp = value
				Me.SendPropertyChanged("datestamp")
				Me.OndatestampChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="NVarChar(250)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_filePath", DbType:="NVarChar(400)")>  _
	Public Property filePath() As String
		Get
			Return Me._filePath
		End Get
		Set
			If (String.Equals(Me._filePath, value) = false) Then
				Me.OnfilePathChanging(value)
				Me.SendPropertyChanging
				Me._filePath = value
				Me.SendPropertyChanged("filePath")
				Me.OnfilePathChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_harvestDate", DbType:="DateTime")>  _
	Public Property harvestDate() As System.Nullable(Of Date)
		Get
			Return Me._harvestDate
		End Get
		Set
			If (Me._harvestDate.Equals(value) = false) Then
				Me.OnharvestDateChanging(value)
				Me.SendPropertyChanging
				Me._harvestDate = value
				Me.SendPropertyChanged("harvestDate")
				Me.OnharvestDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_prov_repositoryID", DbType:="NVarChar(100)")>  _
	Public Property prov_repositoryID() As String
		Get
			Return Me._prov_repositoryID
		End Get
		Set
			If (String.Equals(Me._prov_repositoryID, value) = false) Then
				Me.Onprov_repositoryIDChanging(value)
				Me.SendPropertyChanging
				Me._prov_repositoryID = value
				Me.SendPropertyChanged("prov_repositoryID")
				Me.Onprov_repositoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_prov_datestamp", DbType:="DateTime")>  _
	Public Property prov_datestamp() As System.Nullable(Of Date)
		Get
			Return Me._prov_datestamp
		End Get
		Set
			If (Me._prov_datestamp.Equals(value) = false) Then
				Me.Onprov_datestampChanging(value)
				Me.SendPropertyChanging
				Me._prov_datestamp = value
				Me.SendPropertyChanged("prov_datestamp")
				Me.Onprov_datestampChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_prov_baseURL", DbType:="NVarChar(150)")>  _
	Public Property prov_baseURL() As String
		Get
			Return Me._prov_baseURL
		End Get
		Set
			If (String.Equals(Me._prov_baseURL, value) = false) Then
				Me.Onprov_baseURLChanging(value)
				Me.SendPropertyChanging
				Me._prov_baseURL = value
				Me.SendPropertyChanged("prov_baseURL")
				Me.Onprov_baseURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_searchXML", DbType:="Xml", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property searchXML() As System.Xml.Linq.XElement
		Get
			Return Me._searchXML
		End Get
		Set
			If (Object.Equals(Me._searchXML, value) = false) Then
				Me.OnsearchXMLChanging(value)
				Me.SendPropertyChanging
				Me._searchXML = value
				Me.SendPropertyChanged("searchXML")
				Me.OnsearchXMLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_shortXML", DbType:="Xml", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property shortXML() As System.Xml.Linq.XElement
		Get
			Return Me._shortXML
		End Get
		Set
			If (Object.Equals(Me._shortXML, value) = false) Then
				Me.OnshortXMLChanging(value)
				Me.SendPropertyChanging
				Me._shortXML = value
				Me.SendPropertyChanged("shortXML")
				Me.OnshortXMLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_longXML", DbType:="Xml", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property longXML() As System.Xml.Linq.XElement
		Get
			Return Me._longXML
		End Get
		Set
			If (Object.Equals(Me._longXML, value) = false) Then
				Me.OnlongXMLChanging(value)
				Me.SendPropertyChanging
				Me._longXML = value
				Me.SendPropertyChanged("longXML")
				Me.OnlongXMLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AquiferOAIIdentifier", DbType:="NVarChar(250)")>  _
	Public Property AquiferOAIIdentifier() As String
		Get
			Return Me._AquiferOAIIdentifier
		End Get
		Set
			If (String.Equals(Me._AquiferOAIIdentifier, value) = false) Then
				Me.OnAquiferOAIIdentifierChanging(value)
				Me.SendPropertyChanging
				Me._AquiferOAIIdentifier = value
				Me.SendPropertyChanged("AquiferOAIIdentifier")
				Me.OnAquiferOAIIdentifierChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_title", DbType:="Xml", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property title() As System.Xml.Linq.XElement
		Get
			Return Me._title
		End Get
		Set
			If (Object.Equals(Me._title, value) = false) Then
				Me.OntitleChanging(value)
				Me.SendPropertyChanging
				Me._title = value
				Me.SendPropertyChanged("title")
				Me.OntitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_creator", DbType:="Xml", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property creator() As System.Xml.Linq.XElement
		Get
			Return Me._creator
		End Get
		Set
			If (Object.Equals(Me._creator, value) = false) Then
				Me.OncreatorChanging(value)
				Me.SendPropertyChanging
				Me._creator = value
				Me.SendPropertyChanged("creator")
				Me.OncreatorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subject", DbType:="Xml", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property subject() As System.Xml.Linq.XElement
		Get
			Return Me._subject
		End Get
		Set
			If (Object.Equals(Me._subject, value) = false) Then
				Me.OnsubjectChanging(value)
				Me.SendPropertyChanging
				Me._subject = value
				Me.SendPropertyChanged("subject")
				Me.OnsubjectChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_titleText", DbType:="NVarChar(300)")>  _
	Public Property titleText() As String
		Get
			Return Me._titleText
		End Get
		Set
			If (String.Equals(Me._titleText, value) = false) Then
				Me.OntitleTextChanging(value)
				Me.SendPropertyChanging
				Me._titleText = value
				Me.SendPropertyChanged("titleText")
				Me.OntitleTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_titleNoPunct", DbType:="NVarChar(300)")>  _
	Public Property titleNoPunct() As String
		Get
			Return Me._titleNoPunct
		End Get
		Set
			If (String.Equals(Me._titleNoPunct, value) = false) Then
				Me.OntitleNoPunctChanging(value)
				Me.SendPropertyChanging
				Me._titleNoPunct = value
				Me.SendPropertyChanged("titleNoPunct")
				Me.OntitleNoPunctChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_parent_description", DbType:="NVarChar(MAX)")>  _
	Public Property parent_description() As String
		Get
			Return Me._parent_description
		End Get
		Set
			If (String.Equals(Me._parent_description, value) = false) Then
				Me.Onparent_descriptionChanging(value)
				Me.SendPropertyChanging
				Me._parent_description = value
				Me.SendPropertyChanged("parent_description")
				Me.Onparent_descriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_portalCode", DbType:="TinyInt")>  _
	Public Property portalCode() As System.Nullable(Of Byte)
		Get
			Return Me._portalCode
		End Get
		Set
			If (Me._portalCode.Equals(value) = false) Then
				Me.OnportalCodeChanging(value)
				Me.SendPropertyChanging
				Me._portalCode = value
				Me.SendPropertyChanged("portalCode")
				Me.OnportalCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Record_RecordsToSubject", Storage:="_RecordsToSubjects", ThisKey:="recordID", OtherKey:="recordID")>  _
	Public Property RecordsToSubjects() As EntitySet(Of RecordsToSubject)
		Get
			Return Me._RecordsToSubjects
		End Get
		Set
			Me._RecordsToSubjects.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Record_RecordsToFacet", Storage:="_RecordsToFacets", ThisKey:="recordID", OtherKey:="recordID")>  _
	Public Property RecordsToFacets() As EntitySet(Of RecordsToFacet)
		Get
			Return Me._RecordsToFacets
		End Get
		Set
			Me._RecordsToFacets.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Record_RecordsToCollection", Storage:="_RecordsToCollections", ThisKey:="recordID", OtherKey:="recordID")>  _
	Public Property RecordsToCollections() As EntitySet(Of RecordsToCollection)
		Get
			Return Me._RecordsToCollections
		End Get
		Set
			Me._RecordsToCollections.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Record_RecordsToDateBrowse", Storage:="_RecordsToDateBrowses", ThisKey:="recordID", OtherKey:="recordID")>  _
	Public Property RecordsToDateBrowses() As EntitySet(Of RecordsToDateBrowse)
		Get
			Return Me._RecordsToDateBrowses
		End Get
		Set
			Me._RecordsToDateBrowses.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_RecordsToSubjects(ByVal entity As RecordsToSubject)
		Me.SendPropertyChanging
		entity.Record = Me
	End Sub
	
	Private Sub detach_RecordsToSubjects(ByVal entity As RecordsToSubject)
		Me.SendPropertyChanging
		entity.Record = Nothing
	End Sub
	
	Private Sub attach_RecordsToFacets(ByVal entity As RecordsToFacet)
		Me.SendPropertyChanging
		entity.Record = Me
	End Sub
	
	Private Sub detach_RecordsToFacets(ByVal entity As RecordsToFacet)
		Me.SendPropertyChanging
		entity.Record = Nothing
	End Sub
	
	Private Sub attach_RecordsToCollections(ByVal entity As RecordsToCollection)
		Me.SendPropertyChanging
		entity.Record = Me
	End Sub
	
	Private Sub detach_RecordsToCollections(ByVal entity As RecordsToCollection)
		Me.SendPropertyChanging
		entity.Record = Nothing
	End Sub
	
	Private Sub attach_RecordsToDateBrowses(ByVal entity As RecordsToDateBrowse)
		Me.SendPropertyChanging
		entity.Record = Me
	End Sub
	
	Private Sub detach_RecordsToDateBrowses(ByVal entity As RecordsToDateBrowse)
		Me.SendPropertyChanging
		entity.Record = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DateBrowse")>  _
Partial Public Class DateBrowse
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _dateID As Integer
	
	Private _dateText As String
	
	Private _RecordsToDateBrowses As EntitySet(Of RecordsToDateBrowse)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OndateIDChanging(value As Integer)
    End Sub
    Partial Private Sub OndateIDChanged()
    End Sub
    Partial Private Sub OndateTextChanging(value As String)
    End Sub
    Partial Private Sub OndateTextChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._RecordsToDateBrowses = New EntitySet(Of RecordsToDateBrowse)(AddressOf Me.attach_RecordsToDateBrowses, AddressOf Me.detach_RecordsToDateBrowses)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property dateID() As Integer
		Get
			Return Me._dateID
		End Get
		Set
			If ((Me._dateID = value)  _
						= false) Then
				Me.OndateIDChanging(value)
				Me.SendPropertyChanging
				Me._dateID = value
				Me.SendPropertyChanged("dateID")
				Me.OndateIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateText", DbType:="NVarChar(255)")>  _
	Public Property dateText() As String
		Get
			Return Me._dateText
		End Get
		Set
			If (String.Equals(Me._dateText, value) = false) Then
				Me.OndateTextChanging(value)
				Me.SendPropertyChanging
				Me._dateText = value
				Me.SendPropertyChanged("dateText")
				Me.OndateTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DateBrowse_RecordsToDateBrowse", Storage:="_RecordsToDateBrowses", ThisKey:="dateID", OtherKey:="dateID")>  _
	Public Property RecordsToDateBrowses() As EntitySet(Of RecordsToDateBrowse)
		Get
			Return Me._RecordsToDateBrowses
		End Get
		Set
			Me._RecordsToDateBrowses.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_RecordsToDateBrowses(ByVal entity As RecordsToDateBrowse)
		Me.SendPropertyChanging
		entity.DateBrowse = Me
	End Sub
	
	Private Sub detach_RecordsToDateBrowses(ByVal entity As RecordsToDateBrowse)
		Me.SendPropertyChanging
		entity.DateBrowse = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RecordsToDateBrowse")>  _
Partial Public Class RecordsToDateBrowse
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _dateID As Integer
	
	Private _recordID As Integer
	
	Private _DateBrowse As EntityRef(Of DateBrowse)
	
	Private _Record As EntityRef(Of Record)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OndateIDChanging(value As Integer)
    End Sub
    Partial Private Sub OndateIDChanged()
    End Sub
    Partial Private Sub OnrecordIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnrecordIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DateBrowse = CType(Nothing, EntityRef(Of DateBrowse))
		Me._Record = CType(Nothing, EntityRef(Of Record))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property dateID() As Integer
		Get
			Return Me._dateID
		End Get
		Set
			If ((Me._dateID = value)  _
						= false) Then
				If Me._DateBrowse.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OndateIDChanging(value)
				Me.SendPropertyChanging
				Me._dateID = value
				Me.SendPropertyChanged("dateID")
				Me.OndateIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_recordID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property recordID() As Integer
		Get
			Return Me._recordID
		End Get
		Set
			If ((Me._recordID = value)  _
						= false) Then
				If Me._Record.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnrecordIDChanging(value)
				Me.SendPropertyChanging
				Me._recordID = value
				Me.SendPropertyChanged("recordID")
				Me.OnrecordIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DateBrowse_RecordsToDateBrowse", Storage:="_DateBrowse", ThisKey:="dateID", OtherKey:="dateID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property DateBrowse() As DateBrowse
		Get
			Return Me._DateBrowse.Entity
		End Get
		Set
			Dim previousValue As DateBrowse = Me._DateBrowse.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DateBrowse.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DateBrowse.Entity = Nothing
					previousValue.RecordsToDateBrowses.Remove(Me)
				End If
				Me._DateBrowse.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RecordsToDateBrowses.Add(Me)
					Me._dateID = value.dateID
				Else
					Me._dateID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DateBrowse")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Record_RecordsToDateBrowse", Storage:="_Record", ThisKey:="recordID", OtherKey:="recordID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Record() As Record
		Get
			Return Me._Record.Entity
		End Get
		Set
			Dim previousValue As Record = Me._Record.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Record.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Record.Entity = Nothing
					previousValue.RecordsToDateBrowses.Remove(Me)
				End If
				Me._Record.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RecordsToDateBrowses.Add(Me)
					Me._recordID = value.recordID
				Else
					Me._recordID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Record")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CollectionsToFacets")>  _
Partial Public Class CollectionsToFacet
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _cfRow As Integer
	
	Private _facetID As Integer
	
	Private _collid As Integer
	
	Private _Facet As EntityRef(Of Facet)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncfRowChanging(value As Integer)
    End Sub
    Partial Private Sub OncfRowChanged()
    End Sub
    Partial Private Sub OnfacetIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnfacetIDChanged()
    End Sub
    Partial Private Sub OncollidChanging(value As Integer)
    End Sub
    Partial Private Sub OncollidChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Facet = CType(Nothing, EntityRef(Of Facet))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cfRow", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property cfRow() As Integer
		Get
			Return Me._cfRow
		End Get
		Set
			If ((Me._cfRow = value)  _
						= false) Then
				Me.OncfRowChanging(value)
				Me.SendPropertyChanging
				Me._cfRow = value
				Me.SendPropertyChanged("cfRow")
				Me.OncfRowChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_facetID", DbType:="Int NOT NULL")>  _
	Public Property facetID() As Integer
		Get
			Return Me._facetID
		End Get
		Set
			If ((Me._facetID = value)  _
						= false) Then
				If Me._Facet.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnfacetIDChanging(value)
				Me.SendPropertyChanging
				Me._facetID = value
				Me.SendPropertyChanged("facetID")
				Me.OnfacetIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_collid", DbType:="Int NOT NULL")>  _
	Public Property collid() As Integer
		Get
			Return Me._collid
		End Get
		Set
			If ((Me._collid = value)  _
						= false) Then
				Me.OncollidChanging(value)
				Me.SendPropertyChanging
				Me._collid = value
				Me.SendPropertyChanged("collid")
				Me.OncollidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Facet_CollectionsToFacet", Storage:="_Facet", ThisKey:="facetID", OtherKey:="facetID", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Facet() As Facet
		Get
			Return Me._Facet.Entity
		End Get
		Set
			Dim previousValue As Facet = Me._Facet.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Facet.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Facet.Entity = Nothing
					previousValue.CollectionsToFacets.Remove(Me)
				End If
				Me._Facet.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CollectionsToFacets.Add(Me)
					Me._facetID = value.facetID
				Else
					Me._facetID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Facet")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

Partial Public Class cTQWithPCOnlyResult
	
	Private _RecordID As System.Nullable(Of Integer)
	
	Private _ctRank As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecordID", DbType:="Int")>  _
	Public Property RecordID() As System.Nullable(Of Integer)
		Get
			Return Me._RecordID
		End Get
		Set
			If (Me._RecordID.Equals(value) = false) Then
				Me._RecordID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ctRank", DbType:="Int")>  _
	Public Property ctRank() As System.Nullable(Of Integer)
		Get
			Return Me._ctRank
		End Get
		Set
			If (Me._ctRank.Equals(value) = false) Then
				Me._ctRank = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFacetsCTQResult
	
	Private _facetID As System.Nullable(Of Integer)
	
	Private _itemCount As System.Nullable(Of Integer)
	
	Private _collCount As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_facetID", DbType:="Int")>  _
	Public Property facetID() As System.Nullable(Of Integer)
		Get
			Return Me._facetID
		End Get
		Set
			If (Me._facetID.Equals(value) = false) Then
				Me._facetID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemCount", DbType:="Int")>  _
	Public Property itemCount() As System.Nullable(Of Integer)
		Get
			Return Me._itemCount
		End Get
		Set
			If (Me._itemCount.Equals(value) = false) Then
				Me._itemCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_collCount", DbType:="Int")>  _
	Public Property collCount() As System.Nullable(Of Integer)
		Get
			Return Me._collCount
		End Get
		Set
			If (Me._collCount.Equals(value) = false) Then
				Me._collCount = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetFacetsCTQ2Result
	
	Private _facetID As System.Nullable(Of Integer)
	
	Private _itemCount As System.Nullable(Of Integer)
	
	Private _collCount As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_facetID", DbType:="Int")>  _
	Public Property facetID() As System.Nullable(Of Integer)
		Get
			Return Me._facetID
		End Get
		Set
			If (Me._facetID.Equals(value) = false) Then
				Me._facetID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemCount", DbType:="Int")>  _
	Public Property itemCount() As System.Nullable(Of Integer)
		Get
			Return Me._itemCount
		End Get
		Set
			If (Me._itemCount.Equals(value) = false) Then
				Me._itemCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_collCount", DbType:="Int")>  _
	Public Property collCount() As System.Nullable(Of Integer)
		Get
			Return Me._collCount
		End Get
		Set
			If (Me._collCount.Equals(value) = false) Then
				Me._collCount = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetStateCountResult
	
	Private _institCount As System.Nullable(Of Integer)
	
	Private _stateName As String
	
	Private _stateCount As System.Nullable(Of Integer)
	
	Private _stateID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_institCount", DbType:="Int")>  _
	Public Property institCount() As System.Nullable(Of Integer)
		Get
			Return Me._institCount
		End Get
		Set
			If (Me._institCount.Equals(value) = false) Then
				Me._institCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stateName", DbType:="NVarChar(3000) NOT NULL", CanBeNull:=false)>  _
	Public Property stateName() As String
		Get
			Return Me._stateName
		End Get
		Set
			If (String.Equals(Me._stateName, value) = false) Then
				Me._stateName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stateCount", DbType:="Int")>  _
	Public Property stateCount() As System.Nullable(Of Integer)
		Get
			Return Me._stateCount
		End Get
		Set
			If (Me._stateCount.Equals(value) = false) Then
				Me._stateCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stateID", DbType:="Int NOT NULL")>  _
	Public Property stateID() As Integer
		Get
			Return Me._stateID
		End Get
		Set
			If ((Me._stateID = value)  _
						= false) Then
				Me._stateID = value
			End If
		End Set
	End Property
End Class

Partial Public Class cTQWith3FacetResult
	
	Private _RecordID As System.Nullable(Of Integer)
	
	Private _ctRank As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecordID", DbType:="Int")>  _
	Public Property RecordID() As System.Nullable(Of Integer)
		Get
			Return Me._RecordID
		End Get
		Set
			If (Me._RecordID.Equals(value) = false) Then
				Me._RecordID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ctRank", DbType:="Int")>  _
	Public Property ctRank() As System.Nullable(Of Integer)
		Get
			Return Me._ctRank
		End Get
		Set
			If (Me._ctRank.Equals(value) = false) Then
				Me._ctRank = value
			End If
		End Set
	End Property
End Class

Partial Public Class cTQWith1FacetResult
	
	Private _RecordID As System.Nullable(Of Integer)
	
	Private _ctRank As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecordID", DbType:="Int")>  _
	Public Property RecordID() As System.Nullable(Of Integer)
		Get
			Return Me._RecordID
		End Get
		Set
			If (Me._RecordID.Equals(value) = false) Then
				Me._RecordID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ctRank", DbType:="Int")>  _
	Public Property ctRank() As System.Nullable(Of Integer)
		Get
			Return Me._ctRank
		End Get
		Set
			If (Me._ctRank.Equals(value) = false) Then
				Me._ctRank = value
			End If
		End Set
	End Property
End Class

Partial Public Class cTQWith2FacetResult
	
	Private _RecordID As System.Nullable(Of Integer)
	
	Private _ctRank As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecordID", DbType:="Int")>  _
	Public Property RecordID() As System.Nullable(Of Integer)
		Get
			Return Me._RecordID
		End Get
		Set
			If (Me._RecordID.Equals(value) = false) Then
				Me._RecordID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ctRank", DbType:="Int")>  _
	Public Property ctRank() As System.Nullable(Of Integer)
		Get
			Return Me._ctRank
		End Get
		Set
			If (Me._ctRank.Equals(value) = false) Then
				Me._ctRank = value
			End If
		End Set
	End Property
End Class

Partial Public Class containsTableQueryResult
	
	Private _RecordID As System.Nullable(Of Integer)
	
	Private _ctRank As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecordID", DbType:="Int")>  _
	Public Property RecordID() As System.Nullable(Of Integer)
		Get
			Return Me._RecordID
		End Get
		Set
			If (Me._RecordID.Equals(value) = false) Then
				Me._RecordID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ctRank", DbType:="Int")>  _
	Public Property ctRank() As System.Nullable(Of Integer)
		Get
			Return Me._ctRank
		End Get
		Set
			If (Me._ctRank.Equals(value) = false) Then
				Me._ctRank = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetSubjectCountResult
	
	Private _subjectCount As System.Nullable(Of Integer)
	
	Private _subjectName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subjectCount", DbType:="Int")>  _
	Public Property subjectCount() As System.Nullable(Of Integer)
		Get
			Return Me._subjectCount
		End Get
		Set
			If (Me._subjectCount.Equals(value) = false) Then
				Me._subjectCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_subjectName", DbType:="NVarChar(3000) NOT NULL", CanBeNull:=false)>  _
	Public Property subjectName() As String
		Get
			Return Me._subjectName
		End Get
		Set
			If (String.Equals(Me._subjectName, value) = false) Then
				Me._subjectName = value
			End If
		End Set
	End Property
End Class

Partial Public Class GetStatsResult
	
	Private _ItemCount As System.Nullable(Of Integer)
	
	Private _CollectionCount As System.Nullable(Of Integer)
	
	Private _InstitutionCount As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ItemCount", DbType:="Int")>  _
	Public Property ItemCount() As System.Nullable(Of Integer)
		Get
			Return Me._ItemCount
		End Get
		Set
			If (Me._ItemCount.Equals(value) = false) Then
				Me._ItemCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionCount", DbType:="Int")>  _
	Public Property CollectionCount() As System.Nullable(Of Integer)
		Get
			Return Me._CollectionCount
		End Get
		Set
			If (Me._CollectionCount.Equals(value) = false) Then
				Me._CollectionCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InstitutionCount", DbType:="Int")>  _
	Public Property InstitutionCount() As System.Nullable(Of Integer)
		Get
			Return Me._InstitutionCount
		End Get
		Set
			If (Me._InstitutionCount.Equals(value) = false) Then
				Me._InstitutionCount = value
			End If
		End Set
	End Property
End Class
